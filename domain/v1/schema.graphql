"""
The query root
"""
type Query {
  """
  The currently logged in user.
  """
  me: User!
  """
  Gets a user by ID.
  """
  user(id: ID!): User
  """
  The friends of the currently logged in user.
  """
  friends(first: Int, last: Int, after: String, before: String): UserConnection!
  """
  Tasks accessible by the currrent user
  """
  tasks(
    filter: TaskFilter!
    first: Int
    last: Int
    after: String
    before: String
  ): TaskConnection!
  task(id: ID!): Task

  """
  Invitations the current user has sent to others.
  When the other user accepts the invitation, they and the current user
  will be see each other in their friend lists.
  """
  outgoingInvitations(
    first: Int
    last: Int
    after: String
    before: String
  ): InvitationConnection!

  """
  Invitations the current user has received from others.
  When the current user accepts the invitation, they and the other user
  will be see each other in their friend lists.
  """
  incomingInvitations(
    first: Int
    last: Int
    after: String
    before: String
  ): InvitationConnection!
}

"""
The root query for implementing GraphQL mutations.
"""
type Mutation {
  inviteFriend(input: InviteFriendInput!): InviteFriendPayload!
  removeFriend(input: RemoveFriendInput!): RemoveFriendPayload!
  acceptInvite(input: AcceptInviteInput!): AcceptInvitePayload!
  rejectInvite(input: RejectInviteInput!): RejectInvitePayload!
  removeInvite(input: RemoveInviteInput!): RemoveInvitePayload!
  addTask(input: AddTaskInput!): AddTaskPayload!
  setUserStatus(input: SetUserStatusInput!): SetUserStatusPayload!
  editTask(input: EditTaskInput!): EditTaskPayload!
  startTask(input: StartTaskInput!): StartTaskPayload!
  joinTask(input: JoinTaskInput!): JoinTaskPayload!
  leaveTask(input: LeaveTaskInput!): LeaveTaskPayload!
  endTask(input: EndTaskInput!): EndTaskPayload!
  removeTask(input: RemoveTaskInput!): RemoveTaskPayload!
  setResponse(input: SetResponseInput!): SetResponsePayload!
  clearResponse(input: ClearResponseInput!): ClearResponsePayload!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

###################

input InviteFriendInput {
  email: String!
}

type InviteFriendPayload {
  invitation: Invitation!
}

input RemoveFriendInput {
  userId: ID!
}

type RemoveFriendPayload {
  success: Boolean
}

input AcceptInviteInput {
  id: String!
}

type AcceptInvitePayload {
  friend: User!
}

input RejectInviteInput {
  id: String!
}

type RejectInvitePayload {
  success: Boolean
}

input RemoveInviteInput {
  id: String!
}

type RemoveInvitePayload {
  success: Boolean
}

type Invitation {
  id: ID!
  """
  The email address of the friend to add
  """
  invitedEmail: String!
  """
  The user who sent the invitation
  """
  from: User!
}

type InvitationConnection {
  edges: [InvitationEdge!]!
  nodes: [Invitation!]!
  pageInfo: PageInfo!
}

type InvitationEdge {
  node: Invitation!
  cursor: String!
}

###################

input SetUserStatusInput {
  status: UserStatus!
  currentTaskId: ID
}

type SetUserStatusPayload {
  me: User!
}

type User {
  """
  The unique ID for this user
  """
  id: ID!
  """
  The display name
  """
  name: String!
  """
  The email address
  """
  email: String!
  """
  The avatar URL
  """
  avatarUrl: String
  """
  User status
  """
  status: UserStatus!
  """
  The current task
  """
  currentTask: Task
}

enum UserStatus {
  """
  Online, but not doing anything.
  """
  IDLE
  """
  In the zone focusing on a task.
  """
  FLOW
  """
  Not online.
  """
  AWAY
}

type UserConnection {
  edges: [UserEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
}

type UserEdge {
  node: User!
  cursor: String!
}

##################

input AddTaskInput {
  """
  A short name of the task.
  """
  name: String!
  """
  An optional description or details for the task.
  """
  description: String
  """
  The number of participants needed to get started (not included the owner).
  """
  groupSize: Int!
  """
  The estimated amount of time that this task will take. This helps users prioritize their tasks.
  """
  durationMinutes: Int!

  userIds: [ID!]
}

type AddTaskPayload {
  task: Task!
}

input EditTaskInput {
  id: ID!
  description: String
  durationMinutes: Int
  groupSize: Int
  name: String
  participants: IdCollection
}

type EditTaskPayload {
  task: Task!
}

input StartTaskInput {
  taskId: ID!
}

type StartTaskPayload {
  me: User!
  task: Task!
}

input JoinTaskInput {
  taskId: ID!
}

type JoinTaskPayload {
  me: User!
  task: Task!
}

input LeaveTaskInput {
  taskId: ID!
}

type LeaveTaskPayload {
  me: User!
  task: Task!
}

input EndTaskInput {
  taskId: ID!
}

type EndTaskPayload {
  me: User!
  task: Task!
}

input RemoveTaskInput {
  id: ID!
}

type RemoveTaskPayload {
  task: Task!
}

"""
A conversation or activity to do with one or more other people.
"""
type Task {
  id: ID!
  """
  A short name of the task.
  """
  name: String!
  """
  An optional description or details for the task.
  """
  description: String
  """
  The user who created the task.
  """
  owner: User!
  """
  The users who have been added to the task.
  """
  participants(
    first: Int
    last: Int
    after: String
    before: String
  ): ParticipantConnection!
  """
  The number of participants needed to get started (not included the owner).
  """
  groupSize: Int!
  """
  The estimated amount of time that this task will take. This helps users prioritize their tasks.
  """
  durationMinutes: Int!

  status: TaskStatus!
}

enum TaskFilter {
  """
  Only tasks that the current user owns
  """
  MINE
  """
  All tasks that the current user has access to
  """
  ALL
  """
  All tasks that the current user has access to that have enough participants to start
  """
  READY
}

enum TaskStatus {
  WAITING
  READY
  IN_PROGRESS
  DONE
}

type TaskConnection {
  edges: [TaskEdge!]!
  nodes: [Task!]!
  pageInfo: PageInfo!
}

type TaskEdge {
  node: Task!
  cursor: String!
}

###################

input SetResponseInput {
  taskId: ID!
  participantId: ID!
  response: ParticipantResponse!
}

type SetResponsePayload {
  participant: Participant!
}

input ClearResponseInput {
  taskId: ID!
  participantId: ID!
}

type ClearResponsePayload {
  participant: Participant!
}

input IdCollection {
  add: [ID!]
  remove: [ID!]
  set: [ID!]
}

enum ParticipantResponse {
  YES
  NO
}

"""
A person who has been added to a task.
"""
type Participant {
  id: ID!
  user: User!
  task: Task!
  response: ParticipantResponse
}

type ParticipantConnection {
  edges: [ParticipantEdge!]!
  nodes: [Participant!]!
  pageInfo: PageInfo!
}

type ParticipantEdge {
  node: Participant!
  cursor: String!
}
